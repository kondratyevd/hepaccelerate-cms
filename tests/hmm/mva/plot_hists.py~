from utils import MVASetup
from mva_models import KerasModel, SklearnBdtModel, TfBdtModel
from architectures import architectures
import json

### Configuration ###

ds_path = "/depot/cms/hmm/out_dkondra/dnn_vars/2016"
norm_path = "/depot/cms/hmm/out_nicolo_withJER_2/baseline/plots/2016/normalization.json"

with open(norm_path) as norm_json:
    norm = json.load(norm_json)

class InputSample(object):
    def __init__(self, label, path, category, wgt=1):
        self.label = label
        self.path = path
        self.category = category
        self.wgt = wgt

vbf_genwgt_sum = norm["genweights"]["vbf"]+norm["genweights"]["vbf_powheg1"]+norm["genweights"]["vbf_powheg2"]

input_list = [
    InputSample("ggh", "ggh_amcPS_*", 1),
    InputSample("vbf", "vbf_[0-9]", 0,  wgt=norm["genweights"]["vbf"]/vbf_genwgt_sum),
#    InputSample("vbf_powheg1", "vbf_powheg1_*", 0,  wgt=norm["genweights"]["vbf_powheg1"]/vbf_genwgt_sum),
#    InputSample("vbf_powheg2", "vbf_powheg2_*", 0,  wgt=norm["genweights"]["vbf_powheg2"]/vbf_genwgt_sum),
    InputSample("dy_m105_160_amc", "dy_m105_160_amc_*", 2),
#    InputSample("dy_m105_160_vbf_amc", "dy_m105_160_vbf_amc_*", 2),
    InputSample("ewk_lljj_mll105_160", "ewk_lljj_mll105_160_*", 3),
    InputSample("ttjets_sl", "ttjets_sl_*", 4),
    InputSample("ttjets_dl", "ttjets_dl_*", 4)
]


caltech_vars = ['dEtamm', 'dPhimm', 'dRmm', 'M_jj', 'pt_jj', 'eta_jj', 'phi_jj', 'M_mmjj', 'eta_mmjj', 'phi_mmjj', 'dEta_jj', 'leadingJet_pt', 'subleadingJet_pt',
                'leadingJet_eta', 'subleadingJet_eta', 'dRmin_mj', 'dRmax_mj', 'dRmin_mmj', 'dRmax_mmj', 'Zep',  'leadingJet_qgl', 'subleadingJet_qgl', 'cthetaCS', 
                'softJet5', 'Higgs_pt', 'Higgs_eta', 'Higgs_mass']



def run(vars_to_plot):
    ### Load configuration and run training ###

    mva_setup = MVASetup("")
    mva_setup.out_dir = "tests/hmm/mva/performance/"
    mva_setup.model_dir = "tests/hmm/mva/trained_models/"
    mva_setup.category_labels = {0: "VBF", 1: "ggH", 2: "DY", 3: "EWK", 4: "ttbar"}

    for i in input_list:
        wgt = i.wgt*norm["weight_xs"][i.label]
#        use_for_training = (i.label in training_samples[run_label])
        mva_setup.load_as_category(ds_path, i.path, i.category, wgt, True)

#    mva_setup.add_feature_set("V0",caltech_vars)
#    mva_setup.add_feature_set("V1",nodRs+["dEtaMin_mj", "dEtaMax_mj", "dPhiMin_mj", "dPhiMax_mj", "dEtaMin_mmj", "dEtaMax_mmj", "dPhiMin_mmj", "dPhiMax_mmj"])
#    mva_setup.add_feature_set("V2",caltech_vars+["massErr"])
#    mva_setup.add_feature_set("V3",caltech_vars+["leadingJet_btag", "subleadingJet_btag"])

        
    for v in vars_to_plot:
        if v is "massErr":
            mva_setup.plot_hist(v, (0,7))
        else:
            mva_setup.plot_hist(v)
    del mva_setup

vars_to_plot = [
    "dEtaMin_mj", 
    "dEtaMax_mj", 
    "dPhiMin_mj", 
    "dPhiMax_mj", 
    "dEtaMin_mmj", 
    "dEtaMax_mmj", "dPhiMin_mmj", "dPhiMax_mmj", "leadingJet_btag", "subleadingJet_btag", "massErr"]

run(vars_to_plot)
